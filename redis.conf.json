[{
    "section": "Network",
    "configs": [
        { "key": "bind", "isReadOnly": true, "description": "By default, if no \"bind\" configuration directive is specified, Redis listens for connections from all the network interfaces available on the server. It is possible to listen to just one or multiple selected interfaces using the \"bind\" configuration directive, followed by one or more IP addresses." },
        { "key": "port", "isReadOnly": true, "defaultValue": "6379", "description": "Accept connections on the specified port, default is 6379 (IANA #815344). If port 0 is specified Redis will not listen on a TCP socket." },
        { "key": "protected-mode", "defaultValue": "yes", "description": "By default protected mode is enabled. You should disable it only if you are sure you want clients from other hosts to connect to Redis even if no authentication is configured, nor a specific set of interfaces are explicitly listed using the \"bind\" directive." },
        { "key": "tcp-backlog", "isReadOnly": true, "description": "In high requests-per-second environments you need an high backlog in order to avoid slow clients connections issues. Note that the Linux kernel will silently truncate it to the value of /proc/sys/net/core/somaxconn so make sure to raise both the value of somaxconn and tcp_max_syn_backlog in order to get the desired effect." },
        { "key": "unixsocket", "isReadOnly": true, "description": "Specify the path for the Unix socket that will be used to listen for incoming connections. There is no default, so Redis will not listen on a unix socket when not specified." },
        { "key": "unixsocketperm", "isReadOnly": true, "description": "" },
        { "key": "timeout", "defaultValue": "0", "description": "Close the connection after a client is idle for N seconds (0 to disable)" },
        { "key": "tcp-keepalive", "defaultValue": "300", "description": "If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence" }
    ]
},{
    "section": "General",
    "configs": [
        { "key": "daemonize", "isReadOnly": true, "defaultValue": "no", "description": "By default Redis does not run as a daemon. Note that Redis will write a pid file in /var/run/redis.pid when daemonized." },
        { "key": "supervised", "isReadOnly": true, "possibleValues": ["no", "upstart", "systemd", "auto"], "description": "If you run Redis from upstart or systemd, Redis can interact with your supervision tree." },
        { "key": "pidfile", "isReadOnly": true, "description": "If a PID file is specified, Redis writes it where specified at startup and removes it at exit." },
        { "key": "loglevel", "possibleValues": ["debug", "verbose", "notice", "warning"], "description": "Specify the server verbosity level." },
        { "key": "logfile", "description": "Specify the log file name. Also the empty string can be used to force Redis to log on the standard output. Note that if you use standard output for logging but daemonize, logs will be sent to /dev/null" },
        { "key": "syslog-enabled", "isReadOnly": true, "defaultValue": "no", "description": "To enable logging to the system logger, just set 'syslog-enabled' to yes, and optionally update the other syslog parameters to suit your needs." },
        { "key": "syslog-ident", "isReadOnly": true, "description": "Specify the syslog identity." },
        { "key": "syslog-facility", "isReadOnly": true, "possibleValues": ["USER", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7"], "description": "Specify the syslog facility." },
        { "key": "databases", "isReadOnly": true, "description": "Set the number of databases. The default database is DB 0, you can select a different one on a per-connection basis using SELECT <dbid> where dbid is a number between 0 and 'databases'-1" },
        { "key": "always-show-logo", "isReadOnly": true, "defaultValue": "yes", "description": "By default Redis shows an ASCII art logo only when started to log to the standard output and if the standard output is a TTY. Basically this means that normally a logo is displayed only in interactive sessions." }
    ]
},{
    "section": "Snapshotting",
    "configs": [
        { "key": "save", "description": "Will save the DB if both the given number of seconds and the given number of write operations against the DB occurred" },
        { "key": "stop-writes-on-bgsave-error", "defaultValue": "yes", "description": "By default Redis will stop accepting writes if RDB snapshots are enabled (at least one save point) and the latest background save failed. This will make the user aware (in a hard way) that data is not persisting on disk properly, otherwise chances are that no one will notice and some disaster will happen." },
        { "key": "rdbcompression", "defaultValue": "yes", "description": "Compress string objects using LZF when dump .rdb databases? For default that's set to 'yes' as it's almost always a win. If you want to save some CPU in the saving child set it to 'no' but the dataset will likely be bigger if you have compressible values or keys." },
        { "key": "rdbchecksum", "isReadOnly": true, "defaultValue": "yes", "description": "Since version 5 of RDB a CRC64 checksum is placed at the end of the file. This makes the format more resistant to corruption but there is a performance hit to pay (around 10%) when saving and loading RDB files, so you can disable it for maximum performances." },
        { "key": "dbfilename", "description": "The filename where to dump the DB" },
        { "key": "dir", "isReadOnly": true, "description": "The working directory. The DB will be written inside this directory, with the filename specified above using the 'dbfilename' configuration directive." }
    ]
},{
    "section": "Replication",
    "configs": [
        { "key": "slaveof", "isReadOnly": true, "description": "Master-Replica replication. Use replicaof to make a Redis instance a copy of another Redis server.\nreplicaof <masterip> <masterport>" },
        { "key": "replicaof", "isReadOnly": true, "description": "Master-Replica replication. Use replicaof to make a Redis instance a copy of another Redis server\nreplicaof <masterip> <masterport>" },
        { "key": "masterauth", "description": "If the master is password protected (under Security section) it is possible to tell the replica to authenticate before starting the replication synchronization process, otherwise the master will refuse the replica request." },
        { "key": "slave-serve-stale-data", "defaultValue": "yes", "description": "When a replica loses its connection with the master, or when the replication is still in progress, the replica can act in two different ways:\n\n1) if set to 'yes' (the default) the replica will still reply to client requests, possibly with out of date data, or the data set may just be empty if this is the first synchronization.\n\n2) if set to 'no' the replica will reply with an error \"SYNC with master in progress\" to all the kind of commands but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST, HOST: and LATENCY." },
        { "key": "replica-serve-stale-data", "defaultValue": "yes", "description": "When a replica loses its connection with the master, or when the replication is still in progress, the replica can act in two different ways:\n\n1) if set to 'yes' (the default) the replica will still reply to client requests, possibly with out of date data, or the data set may just be empty if this is the first synchronization.\n\n2) if set to 'no' the replica will reply with an error \"SYNC with master in progress\" to all the kind of commands but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST, HOST: and LATENCY." },
        { "key": "slave-read-only", "defaultValue": "yes", "description": "You can configure a replica instance to accept writes or not. Writing against a replica instance may be useful to store some ephemeral data (because data written on a replica will be easily deleted after resync with the master) but may also cause problems if clients are writing to it because of a misconfiguration." },
        { "key": "replica-read-only", "defaultValue": "yes", "description": "You can configure a replica instance to accept writes or not. Writing against a replica instance may be useful to store some ephemeral data (because data written on a replica will be easily deleted after resync with the master) but may also cause problems if clients are writing to it because of a misconfiguration." },
        { "key": "repl-diskless-sync", "defaultValue": "no", "description": "New replicas and reconnecting replicas that are not able to continue the replication process just receiving differences, need to do what is called a \"full synchronization\". An RDB file is transmitted from the master to the replicas. The transmission can happen in two different ways:\n\n1) Disk-backed: The Redis master creates a new process that writes the RDB file on disk. Later the file is transferred by the parent process to the replicas incrementally.\n\n2) Diskless: The Redis master creates a new process that directly writes the RDB file to replica sockets, without touching the disk at all." },
        { "key": "repl-diskless-sync-delay", "defaultValue": "5", "description": "When diskless replication is enabled, it is possible to configure the delay the server waits in order to spawn the child that transfers the RDB via socket to the replicas. The delay is specified in seconds, and by default is 5 seconds. To disable it entirely just set it to 0 seconds and the transfer will start ASAP." },
        { "key": "repl-ping-slave-period", "defaultValue": "10", "description": "Replicas send PINGs to server in a predefined interval. It's possible to change this interval with the repl_ping_replica_period option. The default value is 10 seconds." },
        { "key": "repl-ping-replica-period", "defaultValue": "10", "description": "Replicas send PINGs to server in a predefined interval. It's possible to change this interval with the repl_ping_replica_period option. The default value is 10 seconds." },
        { "key": "repl-timeout", "description": "The following option sets the replication timeout for:\n\n1) Bulk transfer I/O during SYNC, from the point of view of replica.\n2) Master timeout from the point of view of replicas (data, pings).\n3) Replica timeout from the point of view of masters (REPLCONF ACK pings)." },
        { "key": "repl-disable-tcp-nodelay", "defaultValue": "no", "description": "If you select \"yes\" Redis will use a smaller number of TCP packets and less bandwidth to send data to replicas. But this can add a delay for the data to appear on the replica side, up to 40 milliseconds with Linux kernels using a default configuration.\n\nIf you select \"no\" the delay for data to appear on the replica side will be reduced but more bandwidth will be used for replication." },
        { "key": "repl-backlog-size", "description": "Set the replication backlog size. The backlog is a buffer that accumulates replica data when replicas are disconnected for some time, so that when a replica wants to reconnect again, often a full resync is not needed, but a partial resync is enough, just passing the portion of data the replica missed while disconnected." },
        { "key": "repl-backlog-ttl", "description": "After a master has no longer connected replicas for some time, the backlog will be freed. The following option configures the amount of seconds that need to elapse, starting from the time the last replica disconnected, for the backlog buffer to be freed. A value of 0 means to never release the backlog." },
        { "key": "slave-priority", "description": "The replica priority is an integer number published by Redis in the INFO output. It is used by Redis Sentinel in order to select a replica to promote into a master if the master is no longer working correctly." },
        { "key": "replica-priority", "description": "The replica priority is an integer number published by Redis in the INFO output. It is used by Redis Sentinel in order to select a replica to promote into a master if the master is no longer working correctly." },
        { "key": "min-slaves-to-write", "defaultValue": "0", "description": "It is possible for a master to stop accepting writes if there are less than N replicas connected, having a lag less or equal than M seconds. Setting one or the other to 0 disables the feature." },
        { "key": "min-replicas-to-write", "defaultValue": "0", "description": "It is possible for a master to stop accepting writes if there are less than N replicas connected, having a lag less or equal than M seconds. Setting one or the other to 0 disables the feature." },
        { "key": "min-slaves-max-lag", "description": "The lag in seconds, that must be <= the specified value, is calculated from the last ping received from the replica, that is usually sent every second." },
        { "key": "min-replicas-max-lag", "description": "The lag in seconds, that must be <= the specified value, is calculated from the last ping received from the replica, that is usually sent every second." },
        { "key": "slave-announce-ip", "description": "A Redis master is able to list the address and port of the attached replicas in different ways. For example the \"INFO replication\" section offers this information, which is used, among other tools, by Redis Sentinel in order to discover replica instances. Another place where this info is available is in the output of the \"ROLE\" command of a master." },
        { "key": "replica-announce-ip", "description": "A Redis master is able to list the address and port of the attached replicas in different ways. For example the \"INFO replication\" section offers this information, which is used, among other tools, by Redis Sentinel in order to discover replica instances. Another place where this info is available is in the output of the \"ROLE\" command of a master." },
        { "key": "slave-announce-port", "description": "There is no need to use both the options if you need to override just the port or the IP address." },
        { "key": "replica-announce-port", "description": "There is no need to use both the options if you need to override just the port or the IP address." }
    ]
},{
    "section": "Security",
    "configs": [
        { "key": "requirepass", "description": "Require clients to issue AUTH <PASSWORD> before processing any other commands. This might be useful in environments in which you do not trust others with access to the host running redis-server.\n\nThis should stay commented out for backward compatibility and because most people do not need auth (e.g. they run their own servers).\n\nWarning: since Redis is pretty fast an outside user can try up to 150k passwords per second against a good box. This means that you should use a very strong password otherwise it will be very easy to break." }
    ]
},{
    "section": "Clients",
    "configs": [
        { "key": "maxclients", "defaultValue": "10000", "description": "Set the max number of connected clients at the same time. By default this limit is set to 10000 clients, however if the Redis server is not able to configure the process file limit to allow for the specified limit the max number of allowed clients is set to the current file limit minus 32 (as Redis reserves a few file descriptors for internal uses).\n\nOnce the limit is reached Redis will close all the new connections sending an error 'max number of clients reached'." }
    ]
},{
    "section": "Memory management",
    "configs": [
        { "key": "maxmemory", "description": "Set a memory usage limit to the specified amount of bytes. When the memory limit is reached Redis will try to remove keys according to the eviction policy selected (see maxmemory-policy).\n\nIf Redis can't remove keys according to the policy, or if the policy is set to 'noeviction', Redis will start to reply with errors to commands that would use more memory, like SET, LPUSH, and so on, and will continue to reply to read-only commands like GET." },
        { "key": "maxmemory-policy", "possibleValues": ["volatile-lru", "allkeys-lru", "volatile-lfu", "allkeys-lfu", "volatile-random", "allkeys-random", "volatile-ttl", "noeviction"], "description": "How Redis will select what to remove when maxmemory is reached" },
        { "key": "maxmemory-samples", "defaultValue": "5", "description": "The default of 5 produces good enough results. 10 Approximates very closely true LRU but costs more CPU. 3 is faster but not very accurate." },
        { "key": "slave-ignore-maxmemory", "defaultValue": "yes", "description": "Starting from Redis 5, by default a replica will ignore its maxmemory setting (unless it is promoted to master after a failover or manually)" },
        { "key": "replica-ignore-maxmemory", "defaultValue": "yes", "description": "Starting from Redis 5, by default a replica will ignore its maxmemory setting (unless it is promoted to master after a failover or manually)" }
    ]
},{
    "section": "Lazy freeing",
    "configs": [
        { "key": "lazyfree-lazy-eviction", "defaultValue": "no", "description": "" },
        { "key": "lazyfree-lazy-expire", "defaultValue": "no", "description": "" },
        { "key": "lazyfree-lazy-server-del", "defaultValue": "no", "description": "" },
        { "key": "slave-lazy-flush", "defaultValue": "no", "description": "" },
        { "key": "replica-lazy-flush", "defaultValue": "no", "description": "" }
    ]
},{
    "section": "Append only mode",
    "configs": [
        { "key": "appendonly", "defaultValue": "no", "description": "" },
        { "key": "appendfilename", "isReadOnly": true, "description": "The name of the append only file (default: \"appendonly.aof\")" },
        { "key": "appendfsync", "possibleValues": ["always", "everysec", "no"], "defaultValue": "everysec", "description": "no: don't fsync, just let the OS flush the data when it wants. Faster.\nalways: fsync after every write to the append only log. Slow, Safest.\neverysec: fsync only one time every second. Compromise." },
        { "key": "no-appendfsync-on-rewrite", "defaultValue": "no", "description": "" },
        { "key": "auto-aof-rewrite-percentage", "description": "Automatic rewrite of the append only file. Redis is able to automatically rewrite the log file implicitly calling BGREWRITEAOF when the AOF log size grows by the specified percentage." },
        { "key": "auto-aof-rewrite-min-size", "description": "Specify a minimal size for the AOF file to be rewritten, this is useful to avoid rewriting the AOF file even if the percentage increase is reached but it is still pretty small." },
        { "key": "aof-load-truncated", "defaultValue": "yes", "description": "An AOF file may be found to be truncated at the end during the Redis startup process, when the AOF data gets loaded back into memory. This may happen when the system where Redis is running crashes, especially when an ext4 filesystem is mounted without the data=ordered option (however this can't happen when Redis itself crashes or aborts but the operating system still works correctly)." },
        { "key": "aof-use-rdb-preamble", "defaultValue": "yes", "description": "When rewriting the AOF file, Redis is able to use an RDB preamble in the AOF file for faster rewrites and recoveries. When this option is turned on the rewritten AOF file is composed of two different stanzas: [RDB file][AOF tail]" }
    ]
},{
    "section": "Lua scripting",
    "configs": [
        { "key": "lua-time-limit", "description": "Max execution time of a Lua script in milliseconds. \n\nIf the maximum execution time is reached Redis will log that a script is still in execution after the maximum allowed time and will start to reply to queries with an error \n\nWhen a long running script exceeds the maximum execution time only the SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be used to stop a script that did not yet called write commands. The second is the only way to shut down the server in the case a write command was already issued by the script but the user doesn't want to wait for the natural" }
    ]
},{
    "section": "Cluster",
    "configs": [
        { "key": "cluster-enabled", "isReadOnly": true, "defaultValue": "no", "description": "If yes, enables Redis Cluster support in a specific Redis instance. Otherwise the instance starts as a stand alone instance as usual."},
        { "key": "cluster-config-file", "isReadOnly": true, "description": "Note that despite the name of this option, this is not a user editable configuration file, but the file where a Redis Cluster node automatically persists the cluster configuration (the state, basically) every time there is a change, in order to be able to re-read it at startup. The file lists things like the other nodes in the cluster, their state, persistent variables, and so forth. Often this file is rewritten and flushed on disk as a result of some message reception." },
        { "key": "cluster-node-timeout", "description": "The maximum amount of time in milliseconds a Redis Cluster node can be unavailable, without it being considered as failing. If a master node is not reachable for more than the specified amount of time, it will be failed over by its replicas. This parameter controls other important things in Redis Cluster. Notably, every node that can't reach the majority of master nodes for the specified amount of time, will stop accepting queries." },
        { "key": "cluster-slave-validity-factor", "description": "If set to zero, a replica will always try to failover a master, regardless of the amount of time the link between the master and the replica remained disconnected. If the value is positive, a maximum disconnection time is calculated as the node timeout value multiplied by the factor provided with this option, and if the node is a replica, it will not try to start a failover if the master link was disconnected for more than the specified amount of time. For example if the node timeout is set to 5 seconds, and the validity factor is set to 10, a replica disconnected from the master for more than 50 seconds will not try to failover its master. Note that any value different than zero may result in Redis Cluster to be unavailable after a master failure if there is no replica able to failover it. In that case the cluster will return back available only when the original master rejoins the cluster." },
        { "key": "cluster-replica-validity-factor", "description": "If set to zero, a replica will always try to failover a master, regardless of the amount of time the link between the master and the replica remained disconnected. If the value is positive, a maximum disconnection time is calculated as the node timeout value multiplied by the factor provided with this option, and if the node is a replica, it will not try to start a failover if the master link was disconnected for more than the specified amount of time. For example if the node timeout is set to 5 seconds, and the validity factor is set to 10, a replica disconnected from the master for more than 50 seconds will not try to failover its master. Note that any value different than zero may result in Redis Cluster to be unavailable after a master failure if there is no replica able to failover it. In that case the cluster will return back available only when the original master rejoins the cluster." },
        { "key": "cluster-migration-barrier", "description": "Minimum number of replicas a master will remain connected with, for another replica to migrate to a master which is no longer covered by any replica. See the appropriate section about replica migration in this tutorial for more information." },
        { "key": "cluster-require-full-coverage", "description": "If this is set to yes, as it is by default, the cluster stops accepting writes if some percentage of the key space is not covered by any node. If the option is set to no, the cluster will still serve queries even if only requests about a subset of keys can be processed." },
        { "key": "cluster-slave-no-failover", "defaultValue": "yes", "description": "This option, when set to yes, prevents replicas from trying to failover its master during master failures. However the master can still perform a manual failover, if forced to do so." },
        { "key": "cluster-replica-no-failover", "defaultValue": "no", "description": "This option, when set to yes, prevents replicas from trying to failover its master during master failures. However the master can still perform a manual failover, if forced to do so." }
    ]
},{
    "section": "Cluster NAT support",
    "configs": [
        { "key": "cluster-announce-ip", "description": "" },
        { "key": "cluster-announce-port", "description": "" },
        { "key": "cluster-announce-bus-port", "description": "" }
    ]
},{
    "section": "Show log",
    "configs": [
        { "key": "slowlog-log-slower-than", "description": "The following time is expressed in microseconds, so 1000000 is equivalent to one second. Note that a negative number disables the slow log, while a value of zero forces the logging of every command." },
        { "key": "slowlog-max-len", "description": "There is no limit to this length. Just be aware that it will consume memory. You can reclaim memory used by the slow log with SLOWLOG RESET." }
    ]
},{
    "section": "Latency monitor",
    "configs": [
        { "key": "latency-monitor-threshold", "description": "The system only logs operations that were performed in a time equal or greater than the amount of milliseconds specified. When its value is set to zero, the latency monitor is turned off." }
    ]
},{
    "section": "Event notification",
    "configs": [
        { "key": "notify-keyspace-events", "description": "" }
    ]
},{
    "section": "Advanced config",
    "configs": [
        { "key": "hash-max-ziplist-entries", "description": "" },
        { "key": "hash-max-ziplist-value", "description": "" },
        { "key": "list-max-ziplist-size", "description": "" },
        { "key": "list-compress-depth", "description": "" },
        { "key": "set-max-intset-entries", "description": "" },
        { "key": "zset-max-ziplist-entries", "description": "" },
        { "key": "zset-max-ziplist-value", "description": "" },
        { "key": "hll-sparse-max-bytes", "description": "" },
        { "key": "stream-node-max-bytes", "description": "" },
        { "key": "stream-node-max-entries", "description": "" },
        { "key": "activerehashing", "defaultValue": "yes", "description": "" },
        { "key": "client-output-buffer-limit", "description": "" },
        { "key": "client-query-buffer-limit", "description": "" },
        { "key": "proto-max-bulk-len", "description": "" },
        { "key": "hz", "description": "" },
        { "key": "dynamic-hz", "defaultValue": "yes", "description": "" },
        { "key": "aof-rewrite-incremental-fsync", "defaultValue": "yes", "description": "" },
        { "key": "rdb-save-incremental-fsync", "defaultValue": "yes", "description": "" },
        { "key": "lfu-log-factor", "description": "" },
        { "key": "lfu-decay-time", "description": "" }
    ]
},{
    "section": "Active defragmentation",
    "configs": [
        { "key": "activedefrag", "description": "" },
        { "key": "active-defrag-ignore-bytes", "description": "" },
        { "key": "active-defrag-threshold-lower", "description": "" },
        { "key": "active-defrag-threshold-upper", "description": "" },
        { "key": "active-defrag-cycle-min", "description": "" },
        { "key": "active-defrag-cycle-max", "description": "" },
        { "key": "active-defrag-max-scan-fields", "description": "" }
    ]
}]