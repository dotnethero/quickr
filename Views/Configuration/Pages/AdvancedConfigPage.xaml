<UserControl x:Class="Quickr.Views.Configuration.AdvancedConfigPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:cfg="clr-namespace:Quickr.ViewModels.Configuration"
             mc:Ignorable="d" d:DataContext="{d:DesignInstance cfg:AdvancedConfigPropertyPageModel}">
    <UserControl.Resources>
        <ResourceDictionary Source="../PropertyPagesDictionary.xaml" />
    </UserControl.Resources>
    <ScrollViewer Style="{StaticResource SidePageScroll}">
        <StackPanel Margin="0,0,10,0">
            <GroupBox Header="Hashes">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Hashes are encoded using a memory efficient data structure when they have a
                            small number of entries, and the biggest entry does not exceed a given
                            threshold. These thresholds can be configured using the following directives.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding HashMaxZiplistEntries}" Content="Max ziplist entries:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding HashMaxZiplistEntries}" />
                    <Label Grid.Row="2" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding HashMaxZiplistValue}" Content="Max ziplist value:" />
                    <TextBox Grid.Row="2" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding HashMaxZiplistValue}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Lists">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Lists are also encoded in a special way to save a lot of space.<LineBreak />
                            The number of entries allowed per internal list node can be specified as a fixed maximum size or a maximum number of elements.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            For a fixed maximum size, use -5 through -1, meaning:
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10" FontFamily="Consolas">
                            -5: max size: 64 Kb  &lt;-- not recommended for normal workloads<LineBreak />
                            -4: max size: 32 Kb  &lt;-- not recommended<LineBreak />
                            -3: max size: 16 Kb  &lt;-- probably not recommended<LineBreak />
                            -2: max size: 8 Kb   &lt;-- good<LineBreak />
                            -1: max size: 4 Kb   &lt;-- good
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Positive numbers mean store up to exactly that number of elements per list node.
                            The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
                            but if your use case is unique, adjust the settings as necessary.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ListMaxZiplistSize}" Content="Max ziplist size:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ListMaxZiplistSize}" />
                    <StackPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Lists may also be compressed.<LineBreak />
                            Compress depth is the number of quicklist ziplist nodes from *each* side of the list to *exclude* from compression.
                            The head and tail of the list are always uncompressed for fast push/pop operations.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="3" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ListCompressDepth}" Content="Compress depth:" />
                    <TextBox Grid.Row="3" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ListCompressDepth}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Sets">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Sets have a special encoding in just one case: when a set is composed
                            of just strings that happen to be integers in radix 10 in the range
                            of 64 bit signed integers.<LineBreak />
                            The following configuration setting sets the limit in the size of the
                            set in order to use this special memory saving encoding.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding SetMaxIntsetEntries}" Content="Max intset entries:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding SetMaxIntsetEntries}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Sorted sets">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Similarly to hashes and lists, sorted sets are also specially encoded in
                            order to save a lot of space. This encoding is only used when the length and
                            elements of a sorted set are below the following limits:
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ZsetMaxZiplistEntries}" Content="Max ziplist entries:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ZsetMaxZiplistEntries}" />
                    <Label Grid.Row="2" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ZsetMaxZiplistValue}" Content="Max ziplist value:" />
                    <TextBox Grid.Row="2" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ZsetMaxZiplistValue}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="HyperLogLogs">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            HyperLogLog sparse representation bytes limit. 
                            The limit includes the 16 bytes header. 
                            When an HyperLogLog using the sparse representation crosses this limit, it is converted into the dense representation.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            A value greater than 16000 is totally useless, since at that point the dense representation is more memory efficient.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The suggested value is ~ 3000 in order to have the benefits of the space efficient encoding without slowing down too much PFADD, which is O(N) with the sparse encoding. 
                            The value can be raised to ~ 10000 when CPU is not a concern, but space is, and the data set is composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding HllSparseMaxBytes}" Content="Sparse max bytes:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding HllSparseMaxBytes}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Streams">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Streams macro node max size / items. The stream data structure is a radix
                            tree of big nodes that encode multiple items inside. Using this configuration
                            it is possible to configure how big a single node can be in bytes, and the
                            maximum number of items it may contain before switching to a new node when
                            appending new stream entries. If any of the following settings are set to
                            zero, the limit is ignored, so for instance it is possible to set just a
                            max entires limit by setting max-bytes to 0 and max-entries to the desired
                            value.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding StreamNodeMaxBytes}" Content="Node max bytes:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding StreamNodeMaxBytes}" />
                    <Label Grid.Row="2" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding StreamNodeMaxEntries}" Content="Node max entries:" />
                    <TextBox Grid.Row="2" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding StreamNodeMaxEntries}" />
                </Grid>
            </GroupBox>
        </StackPanel>
    </ScrollViewer>
</UserControl>
