<UserControl x:Class="Quickr.Views.Configuration.AdvancedConfigPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:cfg="clr-namespace:Quickr.ViewModels.Configuration"
             mc:Ignorable="d" d:DataContext="{d:DesignInstance cfg:AdvancedConfigPropertyPageModel}">
    <UserControl.Resources>
        <ResourceDictionary Source="../PropertyPagesDictionary.xaml" />
    </UserControl.Resources>
    <ScrollViewer Style="{StaticResource SidePageScroll}">
        <StackPanel Margin="0,0,10,0">
            <GroupBox Header="Hashes">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Hashes are encoded using a memory efficient data structure when they have a
                            small number of entries, and the biggest entry does not exceed a given
                            threshold. These thresholds can be configured using the following directives.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding HashMaxZiplistEntries}" Content="Max ziplist entries:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding HashMaxZiplistEntries}" />
                    <Label Grid.Row="2" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding HashMaxZiplistValue}" Content="Max ziplist value:" />
                    <TextBox Grid.Row="2" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding HashMaxZiplistValue}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Lists">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Lists are also encoded in a special way to save a lot of space.<LineBreak />
                            The number of entries allowed per internal list node can be specified as a fixed maximum size or a maximum number of elements.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            For a fixed maximum size, use -5 through -1, meaning:
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10" FontFamily="Consolas">
                            -5: max size: 64 Kb  &lt;-- not recommended for normal workloads<LineBreak />
                            -4: max size: 32 Kb  &lt;-- not recommended<LineBreak />
                            -3: max size: 16 Kb  &lt;-- probably not recommended<LineBreak />
                            -2: max size: 8 Kb   &lt;-- good<LineBreak />
                            -1: max size: 4 Kb   &lt;-- good
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Positive numbers mean store up to exactly that number of elements per list node.
                            The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
                            but if your use case is unique, adjust the settings as necessary.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ListMaxZiplistSize}" Content="Max ziplist size:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ListMaxZiplistSize}" />
                    <StackPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Lists may also be compressed.<LineBreak />
                            Compress depth is the number of quicklist ziplist nodes from *each* side of the list to *exclude* from compression.
                            The head and tail of the list are always uncompressed for fast push/pop operations.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="3" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ListCompressDepth}" Content="Compress depth:" />
                    <TextBox Grid.Row="3" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ListCompressDepth}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Sets">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Sets have a special encoding in just one case: when a set is composed
                            of just strings that happen to be integers in radix 10 in the range
                            of 64 bit signed integers.<LineBreak />
                            The following configuration setting sets the limit in the size of the
                            set in order to use this special memory saving encoding.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding SetMaxIntsetEntries}" Content="Max intset entries:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding SetMaxIntsetEntries}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Sorted sets">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Similarly to hashes and lists, sorted sets are also specially encoded in
                            order to save a lot of space. This encoding is only used when the length and
                            elements of a sorted set are below the following limits:
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ZsetMaxZiplistEntries}" Content="Max ziplist entries:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ZsetMaxZiplistEntries}" />
                    <Label Grid.Row="2" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding ZsetMaxZiplistValue}" Content="Max ziplist value:" />
                    <TextBox Grid.Row="2" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding ZsetMaxZiplistValue}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="HyperLogLogs">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            HyperLogLog sparse representation bytes limit. 
                            The limit includes the 16 bytes header. 
                            When an HyperLogLog using the sparse representation crosses this limit, it is converted into the dense representation.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            A value greater than 16000 is totally useless, since at that point the dense representation is more memory efficient.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The suggested value is ~ 3000 in order to have the benefits of the space efficient encoding without slowing down too much PFADD, which is O(N) with the sparse encoding. 
                            The value can be raised to ~ 10000 when CPU is not a concern, but space is, and the data set is composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding HllSparseMaxBytes}" Content="Sparse max bytes:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding HllSparseMaxBytes}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Streams">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Streams macro node max size / items. The stream data structure is a radix
                            tree of big nodes that encode multiple items inside. Using this configuration
                            it is possible to configure how big a single node can be in bytes, and the
                            maximum number of items it may contain before switching to a new node when
                            appending new stream entries. If any of the following settings are set to
                            zero, the limit is ignored, so for instance it is possible to set just a
                            max entires limit by setting max-bytes to 0 and max-entries to the desired
                            value.
                        </TextBlock>
                    </StackPanel>
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding StreamNodeMaxBytes}" Content="Node max bytes:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding StreamNodeMaxBytes}" />
                    <Label Grid.Row="2" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding StreamNodeMaxEntries}" Content="Node max entries:" />
                    <TextBox Grid.Row="2" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding StreamNodeMaxEntries}" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Active rehashing">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
                            order to help rehashing the main Redis hash table (the one mapping top-level
                            keys to values). The hash table implementation Redis uses (see dict.c)
                            performs a lazy rehashing: the more operation you run into a hash table
                            that is rehashing, the more rehashing "steps" are performed, so if the
                            server is idle the rehashing is never complete and some more memory is used
                            by the hash table.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The default is to use this millisecond 10 times every second in order to
                            actively rehash the main dictionaries, freeing memory when possible.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            If unsure:<LineBreak />
                            Use "activerehashing no" if you have hard latency requirements and it is
                            not a good thing in your environment that Redis can reply from time to time
                            to queries with 2 milliseconds delay.<LineBreak />
                            Use "activerehashing yes" if you don't have such hard requirements but
                            want to free memory asap when possible.
                        </TextBlock>
                    </StackPanel>
                    <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Template="{StaticResource YesNoN}" DataContext="{Binding ActiveRehashing}" Content="Active rehashing enabled" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Client output buffer limits">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The client output buffer limits can be used to force disconnection of clients
                            that are not reading data from the server fast enough for some reason (a
                            common reason is that a Pub/Sub client can't consume messages as fast as the
                            publisher can produce them).
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The limit can be set differently for the three different classes of clients:
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10" FontFamily="Consolas" TextWrapping="NoWrap">
                            normal -&gt; normal clients including MONITOR clients<LineBreak />
                            replica -&gt; replica clients<LineBreak />
                            pubsub -&gt; clients subscribed to at least one pubsub channel or pattern
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The syntax of every client-output-buffer-limit directive is the following:
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10" FontFamily="Consolas" TextWrapping="NoWrap">
                            [class] [hard limit] [soft limit] [soft seconds]
                        </TextBlock>
                        <TextBox Template="{StaticResource TextN}" DataContext="{Binding ClientOutputBufferLimit}" />
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            By default normal clients are not limited because they don't receive data
                            without asking (in a push way), but just after a request, so only
                            asynchronous clients may create a scenario where data is requested faster
                            than it can read.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Instead there is a default limit for pubsub and replica clients, since
                            subscribers and replicas receive data in a push fashion.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Both the hard or the soft limit can be disabled by setting them to zero.
                        </TextBlock>
                    </StackPanel>
                </Grid>
            </GroupBox>
            <GroupBox Header="Client query buffer limit">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Client query buffers accumulate new commands. They are limited to a fixed
                            amount by default in order to avoid that a protocol desynchronization (for
                            instance due to a bug in the client) will lead to unbound memory usage in
                            the query buffer. However you can configure it here if you have very special
                            needs, such us huge multi/exec requests or alike.
                        </TextBlock>
                        <TextBox Template="{StaticResource TextN}" DataContext="{Binding ClientQueryBufferLimit}" />
                    </StackPanel>
                </Grid>
            </GroupBox>
            <GroupBox Header="Background tasks">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <StackPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Redis calls an internal function to perform many background tasks, like
                            closing connections of clients in timeout, purging expired keys that are
                            never requested, and so forth.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Not all tasks are performed with the same frequency, but Redis checks for
                            tasks to perform according to the specified Hz value.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            By default Hz is set to 10. Raising the value will use more CPU when
                            Redis is idle, but at the same time will make Redis more responsive when
                            there are many keys expiring at the same time, and timeouts may be
                            handled with more precision.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            The range is between 1 and 500, however a value over 100 is usually not
                            a good idea. Most users should use the default of 10 and raise this up to
                            100 only in environments where very low latency is required.
                        </TextBlock>
                    </StackPanel>
                    <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal">
                        <Label Template="{StaticResource Label}" DataContext="{Binding Hz}" Width="40" Content="Hz:" />
                        <TextBox Template="{StaticResource TextN}" DataContext="{Binding Hz}" Width="40" MaxLength="3" />
                    </StackPanel>
                    <StackPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Normally it is useful to have an Hz value which is proportional to the
                            number of clients connected. This is useful in order, for instance, to
                            avoid too many clients are processed for each background task invocation
                            in order to avoid latency spikes.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            Since the default Hz value by default is conservatively set to 10, Redis
                            offers, and enables by default, the ability to use an adaptive Hz value
                            which will temporary raise when there are many connected clients.
                        </TextBlock>
                        <TextBlock Style="{StaticResource Description}" Margin="0,0,0,10">
                            When dynamic Hz is enabled, the actual configured Hz will be used as
                            as a baseline, but multiples of the configured Hz value will be actually
                            used as needed once more clients are connected. In this way an idle
                            instance will use very little CPU time while a busy instance will be
                            more responsive.
                        </TextBlock>
                    </StackPanel>
                    <CheckBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Template="{StaticResource YesNoN}" DataContext="{Binding DynamicHz}" Content="Dynamic Hz enabled" />
                </Grid>
            </GroupBox>
            <GroupBox Header="Persistence">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Template="{StaticResource YesNo}" DataContext="{Binding AofRewriteIncrementalFsync}" Content="AOF rewrite incremental" />
                    <CheckBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Template="{StaticResource YesNo}" DataContext="{Binding RdbSaveIncrementalFsync}" Content="RDB save incremental" />
                </Grid>
            </GroupBox>
            <GroupBox Header="LFU eviction">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="130" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Label Grid.Row="0" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding LfuLogFactor}" Content="LFU log factor:" />
                    <TextBox Grid.Row="0" Grid.Column="1" Template="{StaticResource TextN}" DataContext="{Binding LfuLogFactor}" />
                    <Label Grid.Row="1" Grid.Column="0" Template="{StaticResource Label}" DataContext="{Binding LfuDecayTime}" Content="LFU decay time:" />
                    <TextBox Grid.Row="1" Grid.Column="1" Template="{StaticResource Text}" DataContext="{Binding LfuDecayTime}" />
                </Grid>
            </GroupBox>
        </StackPanel>
    </ScrollViewer>
</UserControl>
